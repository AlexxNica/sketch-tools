// Helper functions:

var artboardForObject = function(object) {
  if (object.isKindOfClass(MSArtboardGroup)) {
    return object;
  } else if (object.parentGroup() != null) {
    return artboardForObject(object.parentGroup());
  } else {
    return null;
  }
};


// Handlers:

var selectParentArtboards = function(context) {
  var selection = context.selection;
  var doc = context.document;
  var page = doc.currentPage();
  var artboards = page.artboards();

  var artboardsToSelect = [];
  var selectionLoop = selection.objectEnumerator();
  var object;
  while (object = selectionLoop.nextObject()) {
    var artboard = artboardForObject(object);
    if (artboard != null) {
      artboardsToSelect.push(artboard);
    }
  }
  page.deselectAllLayers();

  for (var i = 0; i < artboardsToSelect.length; i++) {
    var artboard = artboardsToSelect[i];
    artboard.select_byExpandingSelection(true, true);
  }
}

var selectLayersConvertibleToOutlines = function(context) {
  var selection = context.selection;
  var doc = context.document;
  var page = doc.currentPage();

  var layersToSelect = [];
  var selectionLoop = selection.objectEnumerator();
  var object;
  while (object = selectionLoop.nextObject()) {
    // Remove this object from the selection if it can't be converted to outlines
    if (!object.canConvertToOutlines()) {
      object.select_byExpandingSelection(false, true);
    }

    // Search through this object's children for layers that can be converted to outlines
    var scope = object.children();
    var predicate = NSPredicate.predicateWithFormat("canConvertToOutlines == YES");
    var results = scope.filteredArrayUsingPredicate(predicate);

    // Record the resulting layers
    var loop = results.objectEnumerator();
    var layer;
    while (layer = loop.nextObject()) {
      layersToSelect.push(layer);
    }
  }

  // Add the layers that can be converted to outlines to the selection
  for (var i = 0; i < layersToSelect.length; i++) {
    var layer = layersToSelect[i];
    layer.select_byExpandingSelection(true, true);
  }
}
